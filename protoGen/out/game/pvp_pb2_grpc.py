# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import prot.game.pvp_pb2 as game_dot_pvp__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in game/pvp_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PvpServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdatePvp = channel.unary_unary(
                '/ck.game.PvpService/UpdatePvp',
                request_serializer=game_dot_pvp__pb2.UpdatePvpRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.UpdatePvpResponse.FromString,
                _registered_method=True)
        self.GetPvpOpponentForRevenge = channel.unary_unary(
                '/ck.game.PvpService/GetPvpOpponentForRevenge',
                request_serializer=game_dot_pvp__pb2.GetPvpOpponentForRevengeRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.GetPvpOpponentForRevengeResponse.FromString,
                _registered_method=True)
        self.ResetPvpOpponentPool = channel.unary_unary(
                '/ck.game.PvpService/ResetPvpOpponentPool',
                request_serializer=game_dot_pvp__pb2.ResetPvpOpponentPoolRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.ResetPvpOpponentPoolResponse.FromString,
                _registered_method=True)
        self.GetPvpDefenseRecords = channel.unary_unary(
                '/ck.game.PvpService/GetPvpDefenseRecords',
                request_serializer=game_dot_pvp__pb2.GetPvpDefenseRecordsRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.GetPvpDefenseRecordsResponse.FromString,
                _registered_method=True)
        self.ChangePvpDefenseDeck = channel.unary_unary(
                '/ck.game.PvpService/ChangePvpDefenseDeck',
                request_serializer=game_dot_pvp__pb2.ChangePvpDefenseDeckRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.ChangePvpDefenseDeckResponse.FromString,
                _registered_method=True)
        self.StartPvpBattle = channel.unary_unary(
                '/ck.game.PvpService/StartPvpBattle',
                request_serializer=game_dot_pvp__pb2.StartPvpBattleRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.StartPvpBattleResponse.FromString,
                _registered_method=True)
        self.PreFinishPvpBattle = channel.unary_unary(
                '/ck.game.PvpService/PreFinishPvpBattle',
                request_serializer=game_dot_pvp__pb2.PreFinishPvpBattleRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.PreFinishPvpBattleResponse.FromString,
                _registered_method=True)
        self.FinishPvpBattle = channel.unary_unary(
                '/ck.game.PvpService/FinishPvpBattle',
                request_serializer=game_dot_pvp__pb2.FinishPvpBattleRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.FinishPvpBattleResponse.FromString,
                _registered_method=True)
        self.CheckPvpTierChangeNotification = channel.unary_unary(
                '/ck.game.PvpService/CheckPvpTierChangeNotification',
                request_serializer=game_dot_pvp__pb2.CheckPvpTierChangeNotificationRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.CheckPvpTierChangeNotificationResponse.FromString,
                _registered_method=True)
        self.CheckPvpSeasonResult = channel.unary_unary(
                '/ck.game.PvpService/CheckPvpSeasonResult',
                request_serializer=game_dot_pvp__pb2.CheckPvpSeasonResultRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.CheckPvpSeasonResultResponse.FromString,
                _registered_method=True)
        self.GetPvpRanking = channel.unary_unary(
                '/ck.game.PvpService/GetPvpRanking',
                request_serializer=game_dot_pvp__pb2.GetPvpRankingRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.GetPvpRankingResponse.FromString,
                _registered_method=True)
        self.GetMyPvpGuildRanking = channel.unary_unary(
                '/ck.game.PvpService/GetMyPvpGuildRanking',
                request_serializer=game_dot_pvp__pb2.GetMyPvpGuildRankingRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.GetMyPvpGuildRankingResponse.FromString,
                _registered_method=True)
        self.GetPvpGuildRanking = channel.unary_unary(
                '/ck.game.PvpService/GetPvpGuildRanking',
                request_serializer=game_dot_pvp__pb2.GetPvpGuildRankingRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.GetPvpGuildRankingResponse.FromString,
                _registered_method=True)
        self.GetPvpHallOfFame = channel.unary_unary(
                '/ck.game.PvpService/GetPvpHallOfFame',
                request_serializer=game_dot_pvp__pb2.GetPvpHallOfFameRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.GetPvpHallOfFameResponse.FromString,
                _registered_method=True)
        self.GetPvpAnalyticsDeckRanking = channel.unary_unary(
                '/ck.game.PvpService/GetPvpAnalyticsDeckRanking',
                request_serializer=game_dot_pvp__pb2.GetPvpAnalyticsDeckRankingRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.GetPvpAnalyticsDeckRankingResponse.FromString,
                _registered_method=True)
        self.GetPvpAnalyticsCookieRanking = channel.unary_unary(
                '/ck.game.PvpService/GetPvpAnalyticsCookieRanking',
                request_serializer=game_dot_pvp__pb2.GetPvpAnalyticsCookieRankingRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.GetPvpAnalyticsCookieRankingResponse.FromString,
                _registered_method=True)
        self.GetPvpPracticeInfo = channel.unary_unary(
                '/ck.game.PvpService/GetPvpPracticeInfo',
                request_serializer=game_dot_pvp__pb2.GetPvpPracticeInfoRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.GetPvpPracticeInfoResponse.FromString,
                _registered_method=True)
        self.CheckCurrentSeasonNotification = channel.unary_unary(
                '/ck.game.PvpService/CheckCurrentSeasonNotification',
                request_serializer=game_dot_pvp__pb2.CheckCurrentSeasonNotificationRequest.SerializeToString,
                response_deserializer=game_dot_pvp__pb2.CheckCurrentSeasonNotificationResponse.FromString,
                _registered_method=True)


class PvpServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpdatePvp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPvpOpponentForRevenge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetPvpOpponentPool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPvpDefenseRecords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangePvpDefenseDeck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartPvpBattle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PreFinishPvpBattle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishPvpBattle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckPvpTierChangeNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckPvpSeasonResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPvpRanking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMyPvpGuildRanking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPvpGuildRanking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPvpHallOfFame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPvpAnalyticsDeckRanking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPvpAnalyticsCookieRanking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPvpPracticeInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckCurrentSeasonNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PvpServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdatePvp': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePvp,
                    request_deserializer=game_dot_pvp__pb2.UpdatePvpRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.UpdatePvpResponse.SerializeToString,
            ),
            'GetPvpOpponentForRevenge': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPvpOpponentForRevenge,
                    request_deserializer=game_dot_pvp__pb2.GetPvpOpponentForRevengeRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.GetPvpOpponentForRevengeResponse.SerializeToString,
            ),
            'ResetPvpOpponentPool': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetPvpOpponentPool,
                    request_deserializer=game_dot_pvp__pb2.ResetPvpOpponentPoolRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.ResetPvpOpponentPoolResponse.SerializeToString,
            ),
            'GetPvpDefenseRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPvpDefenseRecords,
                    request_deserializer=game_dot_pvp__pb2.GetPvpDefenseRecordsRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.GetPvpDefenseRecordsResponse.SerializeToString,
            ),
            'ChangePvpDefenseDeck': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangePvpDefenseDeck,
                    request_deserializer=game_dot_pvp__pb2.ChangePvpDefenseDeckRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.ChangePvpDefenseDeckResponse.SerializeToString,
            ),
            'StartPvpBattle': grpc.unary_unary_rpc_method_handler(
                    servicer.StartPvpBattle,
                    request_deserializer=game_dot_pvp__pb2.StartPvpBattleRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.StartPvpBattleResponse.SerializeToString,
            ),
            'PreFinishPvpBattle': grpc.unary_unary_rpc_method_handler(
                    servicer.PreFinishPvpBattle,
                    request_deserializer=game_dot_pvp__pb2.PreFinishPvpBattleRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.PreFinishPvpBattleResponse.SerializeToString,
            ),
            'FinishPvpBattle': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishPvpBattle,
                    request_deserializer=game_dot_pvp__pb2.FinishPvpBattleRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.FinishPvpBattleResponse.SerializeToString,
            ),
            'CheckPvpTierChangeNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckPvpTierChangeNotification,
                    request_deserializer=game_dot_pvp__pb2.CheckPvpTierChangeNotificationRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.CheckPvpTierChangeNotificationResponse.SerializeToString,
            ),
            'CheckPvpSeasonResult': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckPvpSeasonResult,
                    request_deserializer=game_dot_pvp__pb2.CheckPvpSeasonResultRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.CheckPvpSeasonResultResponse.SerializeToString,
            ),
            'GetPvpRanking': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPvpRanking,
                    request_deserializer=game_dot_pvp__pb2.GetPvpRankingRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.GetPvpRankingResponse.SerializeToString,
            ),
            'GetMyPvpGuildRanking': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMyPvpGuildRanking,
                    request_deserializer=game_dot_pvp__pb2.GetMyPvpGuildRankingRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.GetMyPvpGuildRankingResponse.SerializeToString,
            ),
            'GetPvpGuildRanking': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPvpGuildRanking,
                    request_deserializer=game_dot_pvp__pb2.GetPvpGuildRankingRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.GetPvpGuildRankingResponse.SerializeToString,
            ),
            'GetPvpHallOfFame': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPvpHallOfFame,
                    request_deserializer=game_dot_pvp__pb2.GetPvpHallOfFameRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.GetPvpHallOfFameResponse.SerializeToString,
            ),
            'GetPvpAnalyticsDeckRanking': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPvpAnalyticsDeckRanking,
                    request_deserializer=game_dot_pvp__pb2.GetPvpAnalyticsDeckRankingRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.GetPvpAnalyticsDeckRankingResponse.SerializeToString,
            ),
            'GetPvpAnalyticsCookieRanking': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPvpAnalyticsCookieRanking,
                    request_deserializer=game_dot_pvp__pb2.GetPvpAnalyticsCookieRankingRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.GetPvpAnalyticsCookieRankingResponse.SerializeToString,
            ),
            'GetPvpPracticeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPvpPracticeInfo,
                    request_deserializer=game_dot_pvp__pb2.GetPvpPracticeInfoRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.GetPvpPracticeInfoResponse.SerializeToString,
            ),
            'CheckCurrentSeasonNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckCurrentSeasonNotification,
                    request_deserializer=game_dot_pvp__pb2.CheckCurrentSeasonNotificationRequest.FromString,
                    response_serializer=game_dot_pvp__pb2.CheckCurrentSeasonNotificationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ck.game.PvpService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ck.game.PvpService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PvpService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpdatePvp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/UpdatePvp',
            game_dot_pvp__pb2.UpdatePvpRequest.SerializeToString,
            game_dot_pvp__pb2.UpdatePvpResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPvpOpponentForRevenge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/GetPvpOpponentForRevenge',
            game_dot_pvp__pb2.GetPvpOpponentForRevengeRequest.SerializeToString,
            game_dot_pvp__pb2.GetPvpOpponentForRevengeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResetPvpOpponentPool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/ResetPvpOpponentPool',
            game_dot_pvp__pb2.ResetPvpOpponentPoolRequest.SerializeToString,
            game_dot_pvp__pb2.ResetPvpOpponentPoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPvpDefenseRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/GetPvpDefenseRecords',
            game_dot_pvp__pb2.GetPvpDefenseRecordsRequest.SerializeToString,
            game_dot_pvp__pb2.GetPvpDefenseRecordsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangePvpDefenseDeck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/ChangePvpDefenseDeck',
            game_dot_pvp__pb2.ChangePvpDefenseDeckRequest.SerializeToString,
            game_dot_pvp__pb2.ChangePvpDefenseDeckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartPvpBattle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/StartPvpBattle',
            game_dot_pvp__pb2.StartPvpBattleRequest.SerializeToString,
            game_dot_pvp__pb2.StartPvpBattleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PreFinishPvpBattle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/PreFinishPvpBattle',
            game_dot_pvp__pb2.PreFinishPvpBattleRequest.SerializeToString,
            game_dot_pvp__pb2.PreFinishPvpBattleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FinishPvpBattle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/FinishPvpBattle',
            game_dot_pvp__pb2.FinishPvpBattleRequest.SerializeToString,
            game_dot_pvp__pb2.FinishPvpBattleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckPvpTierChangeNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/CheckPvpTierChangeNotification',
            game_dot_pvp__pb2.CheckPvpTierChangeNotificationRequest.SerializeToString,
            game_dot_pvp__pb2.CheckPvpTierChangeNotificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckPvpSeasonResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/CheckPvpSeasonResult',
            game_dot_pvp__pb2.CheckPvpSeasonResultRequest.SerializeToString,
            game_dot_pvp__pb2.CheckPvpSeasonResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPvpRanking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/GetPvpRanking',
            game_dot_pvp__pb2.GetPvpRankingRequest.SerializeToString,
            game_dot_pvp__pb2.GetPvpRankingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMyPvpGuildRanking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/GetMyPvpGuildRanking',
            game_dot_pvp__pb2.GetMyPvpGuildRankingRequest.SerializeToString,
            game_dot_pvp__pb2.GetMyPvpGuildRankingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPvpGuildRanking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/GetPvpGuildRanking',
            game_dot_pvp__pb2.GetPvpGuildRankingRequest.SerializeToString,
            game_dot_pvp__pb2.GetPvpGuildRankingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPvpHallOfFame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/GetPvpHallOfFame',
            game_dot_pvp__pb2.GetPvpHallOfFameRequest.SerializeToString,
            game_dot_pvp__pb2.GetPvpHallOfFameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPvpAnalyticsDeckRanking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/GetPvpAnalyticsDeckRanking',
            game_dot_pvp__pb2.GetPvpAnalyticsDeckRankingRequest.SerializeToString,
            game_dot_pvp__pb2.GetPvpAnalyticsDeckRankingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPvpAnalyticsCookieRanking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/GetPvpAnalyticsCookieRanking',
            game_dot_pvp__pb2.GetPvpAnalyticsCookieRankingRequest.SerializeToString,
            game_dot_pvp__pb2.GetPvpAnalyticsCookieRankingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPvpPracticeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/GetPvpPracticeInfo',
            game_dot_pvp__pb2.GetPvpPracticeInfoRequest.SerializeToString,
            game_dot_pvp__pb2.GetPvpPracticeInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckCurrentSeasonNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ck.game.PvpService/CheckCurrentSeasonNotification',
            game_dot_pvp__pb2.CheckCurrentSeasonNotificationRequest.SerializeToString,
            game_dot_pvp__pb2.CheckCurrentSeasonNotificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
